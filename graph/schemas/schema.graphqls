# new directive
directive @auth on FIELD_DEFINITION

scalar Map

interface BaseModel {
  id: ID!
  title: String!
  slug: String
  created_at: Int
  updated_at: Int
}


type Task implements BaseModel {
    id: ID!
    title: String!
    slug: String!
    note: String!
    completed: Boolean!
    created_at: Int
    updated_at: Int
}

input NewTask {
    title: String!
    note: String!
}

input UpdateTask {
    id: ID!
    title: String!
    note: String!
}
type User {
  id: ID!
  username: String!
  name: String!
  email: String!
  phone: String!
  created_at: Int!
  updated_at: Int!
}

input NewUser {
  username: String!
  name: String!
  email: String!
  phone: String!
  password1: String!
  password2: String!
}


input UpdateUser {
  name: String!
  email: String!
  phone: String!
  oldPassword: String
  newPassword: String
}
type Query {
  user(filter: Map!): User! 
  users(filter: Map!, limit:Int=12, Page:Int=1):[User!]!
  
  task(filter: Map!): Task!
  tasks(filter: Map!, limit:Int=12, Page:Int=1): [Task!]!
}

type Mutation {
  login(email: String!, password: String!): String!
  register(input: NewUser!): User! 

  createTask(input: NewTask!): Task! @auth
  updateTask(input: UpdateTask!): Task! @auth
  deleteTask(id:ID!): Boolean! @auth
}